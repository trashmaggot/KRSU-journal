@page "/create"
@using FluentValidation
@using Application.Features.OrderFeatures.Commands.CreateOrderCommand
@using Domain.Entities
@using MediatR
@inject IMediator Mediator
@inject NavigationManager NavigationManager
@implements IDisposable

<PageTitle>Create Order</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Order Creation Page</MudText>
<MudText Class="mb-8">This component demonstrates creating order feature.</MudText>

<MudCard>
	<MudForm Model="@Model" @ref="@_form" Validation="@(_orderValidator.ValidateValue)" ValidationDelay="0">
		<MudCardContent>
				<MudTextField @bind-Value="Model.Sender.Name"
							  For="@(() => Model.Sender.Name)"
							  Immediate="true"
							  Label="Sender Name" />

				<MudTextField @bind-Value="Model.Sender.City"
							  For="@(() => Model.Sender.City)"
							  Immediate="true"
							  Label="Sender City" />

				<MudTextField @bind-Value="Model.Sender.Address"
				              For="@(() => Model.Sender.Address)"
				              Immediate="true"
				              Label="Sender Address" />
				
				<MudTextField @bind-Value="Model.Receiver.Name"
				              For="@(() => Model.Receiver.Name)"
				              Immediate="true"
				              Label="Receiver Name" />
				
				<MudTextField @bind-Value="Model.Receiver.City"
				              For="@(() => Model.Receiver.City)"
				              Immediate="true"
				              Label="Receiver City" />
				
				<MudTextField @bind-Value="Model.Receiver.Address"
				              For="@(() => Model.Receiver.Address)"
				              Immediate="true"
				              Label="Receiver Address" />
				
				<MudTextField @bind-Value="Model.Weight"
				              For="@(() => Model.Weight)"
				              Immediate="true"
				              Label="Weight" />
				
				<MudDatePicker Label="Date" @bind-Date="_date"
				               For="@(() => _date)"
				               mmediate="true"/>
		</MudCardContent>
	</MudForm>
    <MudCardActions>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="@(async () => await Submit())">Order</MudButton>
    </MudCardActions>
</MudCard>

@code {

    MudForm? _form;

	readonly OrderModelFluentValidator _orderValidator = new();

	CreateOrderRequest Model = new();
	
	DateTime? _date = DateTime.Today;


	private async Task Submit()
    {
		Model.DateTime = new DateTime(_date!.Value.Year, _date.Value.Month, _date.Value.Day);
		
        await _form.Validate();

        if (_form.IsValid)
        {
	        await Mediator.Send(Model);
	        NavigationManager.NavigateTo("orders");
        }
    }
	
    public class OrderModelFluentValidator : AbstractValidator<CreateOrderRequest>
    {
        public OrderModelFluentValidator()
        {
            RuleFor(x => x.Weight)
                .NotEmpty()
                .InclusiveBetween(1, 1000000);

	        RuleFor(x => x.DateTime)
		        .NotEmpty()
		        .LessThanOrEqualTo(date => DateTime.Now);

	        RuleFor(x => x.Sender)
		        .SetValidator(new ContactInfoValidator());
	
	        RuleFor(x => x.Receiver)
		        .SetValidator(new ContactInfoValidator());
        }

	    public Func<object, string, Task<IEnumerable<string>>> ValidateValue => async (model, propertyName) =>
        {
            var result = await ValidateAsync(ValidationContext<CreateOrderRequest>.CreateWithOptions((CreateOrderRequest)model, x => x.IncludeProperties(propertyName)));
            if (result.IsValid)
                return Array.Empty<string>();
            return result.Errors.Select(e => e.ErrorMessage);
        };
    }
	
    public class ContactInfoValidator : AbstractValidator<ContactInfo>
    {
        public ContactInfoValidator()
        {
            RuleFor(x => x.Address)
                .NotEmpty()
                .Length(1, 50);

			RuleFor(x => x.City)
				.NotEmpty()
				.Length(1, 50);
	
	        RuleFor(x => x.Name)
		        .NotEmpty()
		        .Length(1, 100);
        }

        public Func<object, string, Task<IEnumerable<string>>> ValidateValue => async (model, propertyName) =>
        {
            var result = await ValidateAsync(ValidationContext<ContactInfo>.CreateWithOptions((ContactInfo)model, x => x.IncludeProperties(propertyName)));
            if (result.IsValid)
                return Array.Empty<string>();
            return result.Errors.Select(e => e.ErrorMessage);
        };
    }

	public void Dispose()
	{
		_form?.Dispose();
	}
}